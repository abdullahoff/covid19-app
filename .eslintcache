[{"C:\\covid-19-tracker\\covid-19-tracker\\src\\index.js":"1","C:\\covid-19-tracker\\covid-19-tracker\\src\\App.js":"2","C:\\covid-19-tracker\\covid-19-tracker\\src\\reportWebVitals.js":"3","C:\\covid-19-tracker\\covid-19-tracker\\src\\InfoBox.js":"4","C:\\covid-19-tracker\\covid-19-tracker\\src\\Table.js":"5","C:\\covid-19-tracker\\covid-19-tracker\\src\\util.js":"6","C:\\covid-19-tracker\\covid-19-tracker\\src\\LineGraph.js":"7","C:\\covid-19-tracker\\covid-19-tracker\\src\\Map.js":"8"},{"size":500,"mtime":1608981450153,"results":"9","hashOfConfig":"10"},{"size":5044,"mtime":1609050764738,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":820,"mtime":1608988009884,"results":"13","hashOfConfig":"10"},{"size":420,"mtime":1608988889264,"results":"14","hashOfConfig":"10"},{"size":931,"mtime":1609050984939,"results":"15","hashOfConfig":"10"},{"size":2832,"mtime":1608994872137,"results":"16","hashOfConfig":"10"},{"size":573,"mtime":1608987189864,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1c3hgt9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\covid-19-tracker\\covid-19-tracker\\src\\index.js",[],["38","39"],"C:\\covid-19-tracker\\covid-19-tracker\\src\\App.js",["40","41"],"import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n }from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport './App.css';\nimport Table from './Table';\nimport {prettyPrintStat, sortData} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\nfunction App() {\n\n//STATE = How to write a variable in react\nconst [countries, setCountries] = useState([]); //value that is initialised to thsi array\nconst [country, setCountry] = useState('worldwide');\nconst [countryInfo, setCountryInfo] = useState ([]);\nconst [tableData, setTableData] = useState([]);\nconst [mapCentre, setMapCentre] = useState({lat: 34.80746, lng: -40.4796});\nconst [mapZoom, setMapZoom] = useState(3);\nconst [casesType, setCasesType] = useState(\"cases\");\n\n//modifier called use state changes value\n//initial value given is initial array ie default value\n// USEEFFECT = Runs a peice of code for a given condition\n\nuseEffect(() => {//initally gets values for the worldwide cases to display\n  fetch(\"https://disease.sh/v3/covid-19/all\")//url of location for worldwide data\n    .then (response => response.json())//looks for data for world wide and gets and generates data array\n    .then (data => {\n      setCountryInfo(data);\n  } )\n}, [])\n\n\n\nuseEffect(() => {\n  const getCountriesData = async () => {\n    await fetch (\"https://disease.sh/v3/covid-19/countries\")//fetches data from the api\n    .then ((response) => response.json())//gets the response from the api\n    .then ((data) => {//inputs data into function\n      const countries = data.map((country) => (//calls the function and creates an array for the call\n      {\n        name: country.country, //United states, United Kingdom\n        value: country.countryInfo.iso2 //UK, USA, FR\n      }));\n\n      const sortedData = sortData(data);\n      setTableData(sortedData);\n      setCountries(countries);\n    });\n  };\n  getCountriesData();//calls the function we made to get the data\n}, []);//runs when the component loads and when the conutries value changes\n\nconst onCountryChange = async (event) => {//this goes and looks at what value is then selected in the drop down\n  const countryCode = event.target.value;\n  setCountry(countryCode);//this sets the country code you pick in the drop down menu\n  \n  const url = \n    countryCode === 'worldwide' \n      ? \"https://disease.sh/v3/covid-19/countries/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n  await fetch(url)\n  .then(response => response.json())//now in json format that we can work with\n  .then( (data) => {//updates the input node\n    setCountry(countryCode);//set country info to the data we returned ie store into a variable\n\n    setCountryInfo(data);//this sets all the data you get from the countires response\n  })\n};\n\nconsole.log('Country INFO>>>',countryInfo)\n  return (\n    <div className = \"app\">\n      <div className = \"app__left\">\n        <div className=\"app__header\"> \n          <h1>COVID 19 TRACKER</h1>\n          <h4>By Abdullah Abdullah</h4>\n          <FormControl className = \"app__dropdown\">\n            <Select variant = \"outlined\" onChange={onCountryChange} value = {country}>\n              <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (// for every country return name\n                <MenuItem value = {country.value}>{country.name}</MenuItem>//curly brackets allow one to write html within java script ie its called jsx\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n              \n        <div className= \"app__stats\">\n        <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div> \n        <Map\n        centre = {mapCentre}\n        zoom = {mapZoom}\n        />\n      </div>\n      <Card className = 'app__right'>\n        <CardContent>\n          \n          <h3>Live Cases by Country</h3>\n          <Table countries = {tableData}/>\n          \n          <h3>Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\covid-19-tracker\\covid-19-tracker\\src\\reportWebVitals.js",[],"C:\\covid-19-tracker\\covid-19-tracker\\src\\InfoBox.js",[],"C:\\covid-19-tracker\\covid-19-tracker\\src\\Table.js",[],"C:\\covid-19-tracker\\covid-19-tracker\\src\\util.js",["42"],"//acts as a hrelper function\r\n//import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) =>{\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n    \r\n};\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","C:\\covid-19-tracker\\covid-19-tracker\\src\\LineGraph.js",[],["43","44"],"C:\\covid-19-tracker\\covid-19-tracker\\src\\Map.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":24,"column":19,"nodeType":"51","messageId":"52","endLine":24,"endColumn":31},{"ruleId":"49","severity":1,"message":"53","line":25,"column":17,"nodeType":"51","messageId":"52","endLine":25,"endColumn":27},{"ruleId":"49","severity":1,"message":"54","line":20,"column":7,"nodeType":"51","messageId":"52","endLine":20,"endColumn":22},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'setMapCentre' is assigned a value but never used.","Identifier","unusedVar","'setMapZoom' is assigned a value but never used.","'casesTypeColors' is assigned a value but never used.",["57"],["58"],"no-global-assign","no-unsafe-negation"]